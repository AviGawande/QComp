// CustomTextField.qml
import QtQuick 2.15
import QtQuick.Controls 2.15

TextField {
    id: root

    // Validation properties
    property int validationType: 0  // 0: alphanumeric, 1: numeric, 2: custom, 3: password
    property int minLength: 0
    property int maxLength: 100
    property real minValue: 0
    property real maxValue: 999999
    property int decimalPlaces: 0
    property bool allowAlphabetic: true
    property bool allowNumeric: true
    property bool allowSpecialChars: false
    property string customRegex: ""
    property string validationMessage: ""

    // Password properties
    property bool isPassword: false
    property string confirmPassword: ""
    property bool isPasswordConfirmation: false

    // Visual feedback properties
    property color validColor: "#4CAF50"
    property color invalidColor: "#F44336"
    property color normalBorderColor: "#CCCCCC"

    // Internal properties
    property bool isValid: true
    property string errorMessage: ""

    // Styling
    selectByMouse: true
    echoMode: isPassword || isPasswordConfirmation ? TextInput.Password : TextInput.Normal

    background: Rectangle {
        color: "white"
        border.color: root.activeFocus ? (root.isValid ? root.validColor : root.invalidColor) : root.normalBorderColor
        border.width: root.activeFocus ? 2 : 1
        radius: 4

        Behavior on border.color {
            ColorAnimation { duration: 150 }
        }
    }

    // Set maximum length directly for string/alphanumeric/password fields
    maximumLength: (validationType === 0 || validationType === 2 || validationType === 3) ? maxLength : 32767

    // Input filter to prevent invalid input
    inputMethodHints: {
        if (validationType === 1) {
            if (decimalPlaces > 0) {
                return Qt.ImhFormattedNumbersOnly
            } else {
                return Qt.ImhDigitsOnly
            }
        }
        return Qt.ImhNone
    }

    // Custom input filter for numeric validation
    onTextEdited: {
        if (validationType === 1) {
            var newText = text
            var numValue = parseFloat(newText)

            // Check if the value exceeds maximum
            if (!isNaN(numValue) && numValue > maxValue) {
                // Revert to previous valid value
                text = previousValidText
                return
            }

            // Check decimal places
            if (decimalPlaces === 0 && newText.indexOf('.') !== -1) {
                text = previousValidText
                return
            }

            if (decimalPlaces > 0 && newText.indexOf('.') !== -1) {
                var decimalIndex = newText.indexOf('.')
                var decimals = newText.substring(decimalIndex + 1)
                if (decimals.length > decimalPlaces) {
                    text = previousValidText
                    return
                }
            }

            // Store valid text for next comparison
            previousValidText = newText
        }
    }

    // Store previous valid text for numeric fields
    property string previousValidText: ""

    // Validation function
    function validateInput(inputText) {
        if (!inputText) inputText = text

        var valid = true
        var message = ""

        switch(validationType) {
            case 0: // Alphanumeric validation
                valid = validateAlphanumeric(inputText)
                break
            case 1: // Numeric validation
                valid = validateNumeric(inputText)
                break
            case 2: // Custom regex validation
                valid = validateCustom(inputText)
                break
            case 3: // Password validation
                valid = validatePassword(inputText)
                break
        }

        isValid = valid
        errorMessage = message
        return valid
    }

    function validateAlphanumeric(inputText) {
        // Check length
        if (inputText.length < minLength) {
            errorMessage = "Minimum " + minLength + " characters required"
            return false
        }
        if (inputText.length > maxLength) {
            errorMessage = "Maximum " + maxLength + " characters allowed"
            return false
        }

        // Check character types
        var regex = ""
        if (allowAlphabetic && allowNumeric) {
            regex = "^[a-zA-Z0-9"
        } else if (allowAlphabetic) {
            regex = "^[a-zA-Z"
        } else if (allowNumeric) {
            regex = "^[0-9"
        }

        if (allowSpecialChars) {
            regex += "\\s\\-_"  // Allow space, hyphen, underscore
        }

        regex += "]+$"

        var regExp = new RegExp(regex)
        if (!regExp.test(inputText)) {
            var allowedTypes = []
            if (allowAlphabetic) allowedTypes.push("letters")
            if (allowNumeric) allowedTypes.push("numbers")
            if (allowSpecialChars) allowedTypes.push("spaces, hyphens, underscores")

            errorMessage = "Only " + allowedTypes.join(", ") + " allowed"
            return false
        }

        errorMessage = ""
        return true
    }

    function validateNumeric(inputText) {
        // Check if it's a valid number
        var numValue = parseFloat(inputText)
        if (isNaN(numValue) && inputText !== "") {
            errorMessage = "Please enter a valid number"
            return false
        }

        if (inputText === "") {
            if (minLength > 0) {
                errorMessage = "This field is required"
                return false
            }
            errorMessage = ""
            return true
        }

        // Check range
        if (numValue < minValue) {
            errorMessage = "Minimum value is " + minValue
            return false
        }
        if (numValue > maxValue) {
            errorMessage = "Maximum value is " + maxValue
            return false
        }

        // Check decimal places
        if (decimalPlaces === 0 && inputText.indexOf('.') !== -1) {
            errorMessage = "Decimal numbers not allowed"
            return false
        }

        if (decimalPlaces > 0) {
            var decimalIndex = inputText.indexOf('.')
            if (decimalIndex !== -1) {
                var decimals = inputText.substring(decimalIndex + 1)
                if (decimals.length > decimalPlaces) {
                    errorMessage = "Maximum " + decimalPlaces + " decimal places allowed"
                    return false
                }
            }
        }

        errorMessage = ""
        return true
    }

    function validateCustom(inputText) {
        if (customRegex === "") return true

        var regExp = new RegExp(customRegex)
        var valid = regExp.test(inputText)

        if (!valid) {
            errorMessage = validationMessage || "Invalid input format"
        } else {
            errorMessage = ""
        }

        return valid
    }

    function validatePassword(inputText) {
        // Check length
        if (inputText.length < minLength) {
            errorMessage = "Password must be at least " + minLength + " characters"
            return false
        }
        if (inputText.length > maxLength) {
            errorMessage = "Password cannot exceed " + maxLength + " characters"
            return false
        }

        // For password confirmation field
        if (isPasswordConfirmation) {
            if (inputText !== confirmPassword) {
                errorMessage = "Passwords do not match"
                return false
            }
        }

        // Basic password strength requirements (you can customize these)
        if (minLength > 0) {
            var hasUpper = /[A-Z]/.test(inputText)
            var hasLower = /[a-z]/.test(inputText)
            var hasNumber = /\d/.test(inputText)
            var hasSpecial = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(inputText)

            if (!hasUpper || !hasLower || !hasNumber || !hasSpecial) {
                errorMessage = "Password must contain uppercase, lowercase, number, and special character"
                return false
            }
        }

        errorMessage = ""
        return true
    }

    // Input filtering for numeric fields
    validator: {
        if (validationType === 1) {
            if (decimalPlaces > 0) {
                return doubleValidator
            } else {
                return intValidator
            }
        }
        return null
    }

    IntValidator {
        id: intValidator
        bottom: minValue
        top: maxValue
    }

    DoubleValidator {
        id: doubleValidator
        bottom: minValue
        top: maxValue
        decimals: decimalPlaces
    }

    // Initialize previous valid text
    Component.onCompleted: {
        if (validationType === 1) {
            previousValidText = text
        }
    }

    // Real-time validation
    onTextChanged: {
        validateInput()
    }

    // Validation on focus loss
    onActiveFocusChanged: {
        if (!activeFocus) {
            validateInput()
        }
    }

    // Public method to check validation
    function isInputValid() {
        return validateInput()
    }

    // Method to get validation error
    function getValidationError() {
        return errorMessage
    }

    // Method to clear validation
    function clearValidation() {
        isValid = true
        errorMessage = ""
    }
}




/// ValidatedForm.qml
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

Item {
    width: 600
    height: 800

    ScrollView {
        anchors.fill: parent
        anchors.margins: 20

        ColumnLayout {
            width: parent.width
            spacing: 20

            // Example 1: Alphanumeric string (1-15 characters)
            GroupBox {
                title: "Machine Name (Alphanumeric, 1-15 chars)"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: machineName
                        Layout.fillWidth: true
                        placeholderText: "Enter machine name"

                        // Configure for alphanumeric validation
                        validationType: 0  // alphanumeric
                        minLength: 1
                        maxLength: 15
                        allowAlphabetic: true
                        allowNumeric: true
                        allowSpecialChars: false
                    }

                    Text {
                        text: machineName.errorMessage
                        color: "red"
                        visible: !machineName.isValid && machineName.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Example 2: Integer validation (0-99)
            GroupBox {
                title: "Integer Field (0-99)"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: integerField
                        Layout.fillWidth: true
                        placeholderText: "Enter integer (e.g., 25)"

                        // Configure for integer validation
                        validationType: 1  // numeric
                        minValue: 0
                        maxValue: 99
                        decimalPlaces: 0  // Integer - no decimals allowed
                    }

                    Text {
                        text: integerField.errorMessage
                        color: "red"
                        visible: !integerField.isValid && integerField.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Example 3: Float validation (0.0-999.99)
            GroupBox {
                title: "Float Field (0.0-999.99)"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: floatField
                        Layout.fillWidth: true
                        placeholderText: "Enter float (e.g., 123.45)"

                        // Configure for float validation (2 decimal places)
                        validationType: 1  // numeric
                        minValue: 0.0
                        maxValue: 999.99
                        decimalPlaces: 2  // Float - up to 2 decimal places
                    }

                    Text {
                        text: floatField.errorMessage
                        color: "red"
                        visible: !floatField.isValid && floatField.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Example 4: Double validation (0.0-999999.999999)
            GroupBox {
                title: "Double Field (0.0-999999.999999)"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: doubleField
                        Layout.fillWidth: true
                        placeholderText: "Enter double (e.g., 12345.123456)"

                        // Configure for double validation (6 decimal places)
                        validationType: 1  // numeric
                        minValue: 0.0
                        maxValue: 999999.999999
                        decimalPlaces: 6  // Double - up to 6 decimal places
                    }

                    Text {
                        text: doubleField.errorMessage
                        color: "red"
                        visible: !doubleField.isValid && doubleField.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Example 5: Email validation using custom regex
            GroupBox {
                title: "Email (Custom Regex)"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: emailField
                        Layout.fillWidth: true
                        placeholderText: "Enter email address"

                        // Configure for email validation
                        validationType: 2  // custom
                        customRegex: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
                        validationMessage: "Please enter a valid email address"
                    }

                    Text {
                        text: emailField.errorMessage
                        color: "red"
                        visible: !emailField.isValid && emailField.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Example 6: Password field
            GroupBox {
                title: "Password (8-20 chars, must include uppercase, lowercase, number, special char)"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: passwordField
                        Layout.fillWidth: true
                        placeholderText: "Enter password"

                        // Configure for password validation
                        validationType: 3  // password
                        isPassword: true
                        minLength: 8
                        maxLength: 20
                    }

                    Text {
                        text: passwordField.errorMessage
                        color: "red"
                        visible: !passwordField.isValid && passwordField.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Example 7: Password confirmation field
            GroupBox {
                title: "Confirm Password"
                Layout.fillWidth: true

                ColumnLayout {
                    anchors.fill: parent

                    CustomTextField {
                        id: confirmPasswordField
                        Layout.fillWidth: true
                        placeholderText: "Re-enter password"

                        // Configure for password confirmation validation
                        validationType: 3  // password
                        isPasswordConfirmation: true
                        confirmPassword: passwordField.text
                        minLength: 8
                        maxLength: 20

                        // Update validation when the original password changes
                        onConfirmPasswordChanged: {
                            validateInput()
                        }
                    }

                    Text {
                        text: confirmPasswordField.errorMessage
                        color: "red"
                        visible: !confirmPasswordField.isValid && confirmPasswordField.errorMessage !== ""
                        font.pixelSize: 12
                    }
                }
            }

            // Submit button
            Button {
                text: "Submit"
                Layout.alignment: Qt.AlignHCenter
                enabled: machineName.isValid && integerField.isValid &&
                        floatField.isValid && doubleField.isValid && emailField.isValid &&
                        passwordField.isValid && confirmPasswordField.isValid

                onClicked: {
                    console.log("Form submitted successfully!")
                    console.log("Machine Name:", machineName.text)
                    console.log("Integer:", integerField.text)
                    console.log("Float:", floatField.text)
                    console.log("Double:", doubleField.text)
                    console.log("Email:", emailField.text)
                    console.log("Password: [HIDDEN]")
                }
            }
        }
    }
}

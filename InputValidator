// ValidatedTextField.qml
import QtQuick 2.15
import QtQuick.Controls 2.15

Rectangle {
    id: root

    property string labelText: ""
    property string placeholderText: ""
    property string text: textField.text
    property string dataType: "string"           // string, int, float, double, bool
    property var validationRules: ["required"]   // Array of rules
    property var validator: null                 // Validator instance
    property bool isValid: true
    property string errorMessage: ""

    width: 300
    height: column.height + 20
    color: "#FFFFFF"
    border.color: isValid ? "#CCCCCC" : "#FF6B6B"
    border.width: 2
    radius: 8

    Column {
        id: column
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.top: parent.top
        anchors.margins: 10
        spacing: 5

        Text {
            text: labelText + (validationRules.includes("required") ? " *" : "")
            color: "#666666"
            font.pixelSize: 14
            font.weight: Font.Medium
            visible: labelText !== ""
        }

        TextField {
            id: textField
            width: parent.width
            placeholderText: root.placeholderText
            color: "#333333"
            font.pixelSize: 16
            background: Rectangle {
                color: "transparent"
            }

            onActiveFocusChanged: {
                if (!activeFocus) {
                    performValidation()
                }
            }
        }

        Text {
            text: errorMessage
            color: "#FF6B6B"
            font.pixelSize: 12
            visible: !isValid && errorMessage !== ""
            wrapMode: Text.WordWrap
            width: parent.width
        }
    }

    function performValidation() {
        if (!validator) {
            console.warn("No validator provided")
            return true
        }

        var result = validator.validate(textField.text, dataType, validationRules)
        isValid = result.isValid
        errorMessage = result.errorMessage

        return result.isValid
    }

    function validate() {
        return performValidation()
    }

    function clear() {
        textField.text = ""
        isValid = true
        errorMessage = ""
    }

    function getValue() {
        switch(dataType) {
        case "int":
            return parseInt(textField.text)
        case "float":
        case "double":
            return parseFloat(textField.text)
        case "bool":
            return textField.text === "true" || textField.text === "1"
        default:
            return textField.text
        }
    }
}

// Validators.qml
import QtQuick 2.15

QtObject {

    // Data Type Validation
    function validateString(input) {
        return typeof input === "string"
    }

    function validateInt(input) {
        var num = parseInt(input)
        return !isNaN(num) && num.toString() === input.toString() && /^-?\d+$/.test(input)
    }

    function validateFloat(input) {
        var num = parseFloat(input)
        return !isNaN(num) && /^-?\d+(\.\d+)?$/.test(input)
    }

    function validateDouble(input) {
        return validateFloat(input) // Same as float in JavaScript
    }

    function validateBool(input) {
        return input === true || input === false ||
               input === "true" || input === "false" ||
               input === "1" || input === "0"
    }

    // Content Validation
    function validateRequired(input) {
        return input !== null && input !== undefined && input.toString().trim().length > 0
    }

    function validateText(input) {
        return /^[a-zA-Z\s]*$/.test(input)
    }

    function validateAlphaNumeric(input) {
        return /^[a-zA-Z0-9\s]*$/.test(input)
    }

    function validatePhone(input) {
        return /^[\+]?[0-9\-\(\)\s]{10,15}$/.test(input)
    }

    function validateMinLength(input, minLength) {
        return input.toString().length >= minLength
    }

    function validateMaxLength(input, maxLength) {
        return input.toString().length <= maxLength
    }

    function validateRange(input, min, max) {
        var num = parseFloat(input)
        return !isNaN(num) && num >= min && num <= max
    }

    // Main validation function
    function validate(input, dataType, rules) {
        var result = {
            isValid: true,
            errorMessage: ""
        }

        // Check data type first
        switch(dataType) {
        case "string":
            if (!validateString(input)) {
                result.isValid = false
                result.errorMessage = "Must be a valid string"
                return result
            }
            break
        case "int":
            if (!validateInt(input)) {
                result.isValid = false
                result.errorMessage = "Must be a valid integer"
                return result
            }
            break
        case "float":
            if (!validateFloat(input)) {
                result.isValid = false
                result.errorMessage = "Must be a valid decimal number"
                return result
            }
            break
        case "double":
            if (!validateDouble(input)) {
                result.isValid = false
                result.errorMessage = "Must be a valid number"
                return result
            }
            break
        case "bool":
            if (!validateBool(input)) {
                result.isValid = false
                result.errorMessage = "Must be true or false"
                return result
            }
            break
        }

        // Check validation rules
        for (var i = 0; i < rules.length; i++) {
            var rule = rules[i]

            if (rule === "required") {
                if (!validateRequired(input)) {
                    result.isValid = false
                    result.errorMessage = "This field is required"
                    return result
                }
            }
            else if (rule === "text") {
                if (!validateText(input)) {
                    result.isValid = false
                    result.errorMessage = "Only letters and spaces are allowed"
                    return result
                }
            }
            else if (rule === "alphanumeric") {
                if (!validateAlphaNumeric(input)) {
                    result.isValid = false
                    result.errorMessage = "Only letters, numbers and spaces are allowed"
                    return result
                }
            }
            else if (rule === "email") {
                if (!validateEmail(input)) {
                    result.isValid = false
                    result.errorMessage = "Please enter a valid email address"
                    return result
                }
            }
            else if (rule === "phone") {
                if (!validatePhone(input)) {
                    result.isValid = false
                    result.errorMessage = "Please enter a valid phone number"
                    return result
                }
            }
            else if (rule.startsWith("minLength:")) {
                var minLen = parseInt(rule.split(":")[1])
                if (!validateMinLength(input, minLen)) {
                    result.isValid = false
                    result.errorMessage = "Minimum " + minLen + " characters required"
                    return result
                }
            }
            else if (rule.startsWith("maxLength:")) {
                var maxLen = parseInt(rule.split(":")[1])
                if (!validateMaxLength(input, maxLen)) {
                    result.isValid = false
                    result.errorMessage = "Maximum " + maxLen + " characters allowed"
                    return result
                }
            }
            else if (rule.startsWith("range:")) {
                var rangeParts = rule.split(":")[1].split("-")
                var min = parseFloat(rangeParts[0])
                var max = parseFloat(rangeParts[1])
                if (!validateRange(input, min, max)) {
                    result.isValid = false
                    result.errorMessage = "Value must be between " + min + " and " + max
                    return result
                }
            }
        }

        return result
    }
}

// Form.qml
import QtQuick 2.15
import QtQuick.Controls 2.15

ScrollView {
    id: root

    // Create validator instance
    Validators {
        id: validators
    }

    Column {
        width: root.width - 40
        anchors.horizontalCenter: parent.horizontalCenter
        spacing: 20
        topPadding: 20

        ValidatedTextField {
            id: nameField
            width: parent.width
            labelText: "Full Name"
            dataType: "string"
            validationRules: ["required", "text"]
            validator: validators
        }

        ValidatedTextField {
            id: ageField
            width: parent.width
            labelText: "Age"
            dataType: "int"
            validationRules: ["required", "range:1-120"]
            validator: validators
        }

        ValidatedTextField {
            id: gradeField
            width: parent.width
            labelText: "Grade"
            dataType: "float"
            validationRules: ["required", "range:0-100"]
            validator: validators
        }

        ValidatedTextField {
            id: cityField
            width: parent.width
            labelText: "City"
            dataType: "string"
            validationRules: ["required", "text", "minLength:2"]
            validator: validators
        }

        Row {
            anchors.horizontalCenter: parent.horizontalCenter
            spacing: 20

            Button {
                text: "Submit"
                background: Rectangle {
                    color: "#4ECDC4"
                    radius: 6
                }
                contentItem: Text {
                    text: parent.text
                    color: "white"
                    font.pixelSize: 16
                    horizontalAlignment: Text.AlignHCenter
                    verticalAlignment: Text.AlignVCenter
                }

                onClicked: {
                    var allValid = nameField.validate() &&
                                 ageField.validate() &&
                                 gradeField.validate() &&
                                 cityField.validate()
                }
            }

            Button {
                text: "Clear"
                background: Rectangle {
                    color: "#FF6B6B"
                    radius: 6
                }
                contentItem: Text {
                    text: parent.text
                    color: "white"
                    font.pixelSize: 16
                    horizontalAlignment: Text.AlignHCenter
                    verticalAlignment: Text.AlignVCenter
                }

                onClicked: {
                    nameField.clear()
                    ageField.clear()
                    gradeField.clear()
                    cityField.clear()
                }
            }
        }
    }
}
